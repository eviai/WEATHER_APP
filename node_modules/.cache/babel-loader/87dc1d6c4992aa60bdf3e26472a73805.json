{"ast":null,"code":"var _jsxFileName = \"/Users/jeff/Desktop/weather_react/src/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport \"./Forecast.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(props) {\n  _s();\n\n  let [loaded, setLoaded] = useState(false);\n  let [forecastData, setForecastData] = useState(null);\n\n  function handleResponse(response) {\n    setForecastData(response.data.daily);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    console.log(forecastData);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Forecast\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-daily\",\n            children: \"TUES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(WeatherIcon, {\n            code: \"01d\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-temp\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"forecast-max-temp\",\n              children: [Math.round(forecastData[0].temp.max), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"forecast-min-temp\",\n              children: [Math.round(forecastData[0].temp.min), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  } else {\n    let apiKey = \"51ac8c007be10df8c6279a4b5212951e\";\n    let longitude = props.coordinates.lon;\n    let latitude = props.coordinates.lat;\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;\n    axios.get(apiUrl).then(handleResponse);\n    return null;\n  }\n}\n\n_s(Forecast, \"7QCA7wflsKGKhuAfsgfiivRqNKI=\");\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/jeff/Desktop/weather_react/src/Forecast.js"],"names":["React","useState","WeatherIcon","axios","Forecast","props","loaded","setLoaded","forecastData","setForecastData","handleResponse","response","data","daily","console","log","Math","round","temp","max","min","apiKey","longitude","coordinates","lon","latitude","lat","apiUrl","get","then"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,MAAI,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAAlC;AACA,MAAI,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAA9C;;AAEA,WAASS,cAAT,CAAwBC,QAAxB,EAAkC;AAChCF,IAAAA,eAAe,CAACE,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAf;AACAN,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,MAAID,MAAJ,EAAY;AACVQ,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,WAAD;AAAa,YAAA,IAAI,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,oCACE;AAAM,cAAA,SAAS,EAAC,mBAAhB;AAAA,yBAAqCQ,IAAI,CAACC,KAAL,CAAWT,YAAY,CAAC,CAAD,CAAZ,CAAgBU,IAAhB,CAAqBC,GAAhC,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAM,cAAA,SAAS,EAAC,mBAAhB;AAAA,yBAAqCH,IAAI,CAACC,KAAL,CAAWT,YAAY,CAAC,CAAD,CAAZ,CAAgBU,IAAhB,CAAqBE,GAAhC,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAcD,GAjBD,MAiBO;AACL,QAAIC,MAAM,GAAG,kCAAb;AACA,QAAIC,SAAS,GAAGjB,KAAK,CAACkB,WAAN,CAAkBC,GAAlC;AACA,QAAIC,QAAQ,GAAGpB,KAAK,CAACkB,WAAN,CAAkBG,GAAjC;AACA,QAAIC,MAAM,GAAI,uDAAsDF,QAAS,QAAOH,SAAU,UAASD,MAAO,eAA9G;AACAlB,IAAAA,KAAK,CAACyB,GAAN,CAAUD,MAAV,EAAkBE,IAAlB,CAAuBnB,cAAvB;AAEA,WAAO,IAAP;AACD;AACF;;GAnCuBN,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport \"./Forecast.css\";\n\nimport axios from \"axios\";\n\nexport default function Forecast(props) {\n  let [loaded, setLoaded] = useState(false);\n  let [forecastData, setForecastData] = useState(null);\n\n  function handleResponse(response) {\n    setForecastData(response.data.daily);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    console.log(forecastData);\n\n    return (\n      <div className=\"Forecast\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"forecast-daily\">TUES</div>\n            <WeatherIcon code=\"01d\" />\n            <div className=\"forecast-temp\">\n              <span className=\"forecast-max-temp\">{Math.round(forecastData[0].temp.max)}°</span>\n              <span className=\"forecast-min-temp\">{Math.round(forecastData[0].temp.min)}°</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    let apiKey = \"51ac8c007be10df8c6279a4b5212951e\";\n    let longitude = props.coordinates.lon;\n    let latitude = props.coordinates.lat;\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;\n    axios.get(apiUrl).then(handleResponse);\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}